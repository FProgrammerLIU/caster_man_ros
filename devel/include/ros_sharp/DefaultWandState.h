// Generated by gencpp from file ros_sharp/DefaultWandState.msg
// DO NOT EDIT!


#ifndef ROS_SHARP_MESSAGE_DEFAULTWANDSTATE_H
#define ROS_SHARP_MESSAGE_DEFAULTWANDSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_sharp
{
template <class ContainerAllocator>
struct DefaultWandState_
{
  typedef DefaultWandState_<ContainerAllocator> Type;

  DefaultWandState_()
    : header()
    , interactUI(0)
    , teleport(0)
    , grabPinch(0)
    , grabGrip(0)
    , squeeze(0.0)  {
    }
  DefaultWandState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , interactUI(0)
    , teleport(0)
    , grabPinch(0)
    , grabGrip(0)
    , squeeze(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _interactUI_type;
  _interactUI_type interactUI;

   typedef uint8_t _teleport_type;
  _teleport_type teleport;

   typedef uint8_t _grabPinch_type;
  _grabPinch_type grabPinch;

   typedef uint8_t _grabGrip_type;
  _grabGrip_type grabGrip;

   typedef float _squeeze_type;
  _squeeze_type squeeze;





  typedef boost::shared_ptr< ::ros_sharp::DefaultWandState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sharp::DefaultWandState_<ContainerAllocator> const> ConstPtr;

}; // struct DefaultWandState_

typedef ::ros_sharp::DefaultWandState_<std::allocator<void> > DefaultWandState;

typedef boost::shared_ptr< ::ros_sharp::DefaultWandState > DefaultWandStatePtr;
typedef boost::shared_ptr< ::ros_sharp::DefaultWandState const> DefaultWandStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sharp::DefaultWandState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sharp::DefaultWandState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sharp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ros_sharp': ['/home/caster/ros_ws/caster/src/ros_sharp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sharp::DefaultWandState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sharp::DefaultWandState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sharp::DefaultWandState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sharp::DefaultWandState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sharp::DefaultWandState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sharp::DefaultWandState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sharp::DefaultWandState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf1f2c25381116462085b0b2225829e4";
  }

  static const char* value(const ::ros_sharp::DefaultWandState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf1f2c2538111646ULL;
  static const uint64_t static_value2 = 0x2085b0b2225829e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sharp::DefaultWandState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sharp/DefaultWandState";
  }

  static const char* value(const ::ros_sharp::DefaultWandState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sharp::DefaultWandState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 interactUI\n"
"uint8 teleport\n"
"uint8 grabPinch\n"
"uint8 grabGrip\n"
"float32 squeeze\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_sharp::DefaultWandState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sharp::DefaultWandState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.interactUI);
      stream.next(m.teleport);
      stream.next(m.grabPinch);
      stream.next(m.grabGrip);
      stream.next(m.squeeze);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DefaultWandState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sharp::DefaultWandState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sharp::DefaultWandState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "interactUI: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interactUI);
    s << indent << "teleport: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.teleport);
    s << indent << "grabPinch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grabPinch);
    s << indent << "grabGrip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grabGrip);
    s << indent << "squeeze: ";
    Printer<float>::stream(s, indent + "  ", v.squeeze);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SHARP_MESSAGE_DEFAULTWANDSTATE_H
