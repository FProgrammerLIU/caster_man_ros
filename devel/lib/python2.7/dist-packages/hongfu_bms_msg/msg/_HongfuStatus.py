# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hongfu_bms_msg/HongfuStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class HongfuStatus(genpy.Message):
  _md5sum = "b80f4c066d6a4a362443344e0856c5ce"
  _type = "hongfu_bms_msg/HongfuStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# voltage
float32 Voltage

# current
float32 Current

# residualCapacity
int32 ResidualCapacity

# DesignCapacity
int32 DesignCapacity

# CycleIndex
int16 CycleIndex

# DataProduction
string DataProduction

# StatusBalance
uint32 StatusBalance

# StatusProtect
uint16 StatusProtect

# Version
uint16 Version

# Rsoc
int16 Rsoc

# StatueMos
int16 StatueMos

# CellNumber
int16 CellNumber

# NtcNumber
int16 NtcNumber

# NtcTem
float64[] NtcTem

# CellVoltage
float64[] CellVoltage

# ErrorId
int64[] ErrorId

# ErrorInfo
string[] ErrorInfo
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','Voltage','Current','ResidualCapacity','DesignCapacity','CycleIndex','DataProduction','StatusBalance','StatusProtect','Version','Rsoc','StatueMos','CellNumber','NtcNumber','NtcTem','CellVoltage','ErrorId','ErrorInfo']
  _slot_types = ['std_msgs/Header','float32','float32','int32','int32','int16','string','uint32','uint16','uint16','int16','int16','int16','int16','float64[]','float64[]','int64[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Voltage,Current,ResidualCapacity,DesignCapacity,CycleIndex,DataProduction,StatusBalance,StatusProtect,Version,Rsoc,StatueMos,CellNumber,NtcNumber,NtcTem,CellVoltage,ErrorId,ErrorInfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HongfuStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Voltage is None:
        self.Voltage = 0.
      if self.Current is None:
        self.Current = 0.
      if self.ResidualCapacity is None:
        self.ResidualCapacity = 0
      if self.DesignCapacity is None:
        self.DesignCapacity = 0
      if self.CycleIndex is None:
        self.CycleIndex = 0
      if self.DataProduction is None:
        self.DataProduction = ''
      if self.StatusBalance is None:
        self.StatusBalance = 0
      if self.StatusProtect is None:
        self.StatusProtect = 0
      if self.Version is None:
        self.Version = 0
      if self.Rsoc is None:
        self.Rsoc = 0
      if self.StatueMos is None:
        self.StatueMos = 0
      if self.CellNumber is None:
        self.CellNumber = 0
      if self.NtcNumber is None:
        self.NtcNumber = 0
      if self.NtcTem is None:
        self.NtcTem = []
      if self.CellVoltage is None:
        self.CellVoltage = []
      if self.ErrorId is None:
        self.ErrorId = []
      if self.ErrorInfo is None:
        self.ErrorInfo = []
    else:
      self.header = std_msgs.msg.Header()
      self.Voltage = 0.
      self.Current = 0.
      self.ResidualCapacity = 0
      self.DesignCapacity = 0
      self.CycleIndex = 0
      self.DataProduction = ''
      self.StatusBalance = 0
      self.StatusProtect = 0
      self.Version = 0
      self.Rsoc = 0
      self.StatueMos = 0
      self.CellNumber = 0
      self.NtcNumber = 0
      self.NtcTem = []
      self.CellVoltage = []
      self.ErrorId = []
      self.ErrorInfo = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f2ih().pack(_x.Voltage, _x.Current, _x.ResidualCapacity, _x.DesignCapacity, _x.CycleIndex))
      _x = self.DataProduction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I2H4h().pack(_x.StatusBalance, _x.StatusProtect, _x.Version, _x.Rsoc, _x.StatueMos, _x.CellNumber, _x.NtcNumber))
      length = len(self.NtcTem)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.NtcTem))
      length = len(self.CellVoltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.CellVoltage))
      length = len(self.ErrorId)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.ErrorId))
      length = len(self.ErrorInfo)
      buff.write(_struct_I.pack(length))
      for val1 in self.ErrorInfo:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.Voltage, _x.Current, _x.ResidualCapacity, _x.DesignCapacity, _x.CycleIndex,) = _get_struct_2f2ih().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.DataProduction = str[start:end].decode('utf-8')
      else:
        self.DataProduction = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.StatusBalance, _x.StatusProtect, _x.Version, _x.Rsoc, _x.StatueMos, _x.CellNumber, _x.NtcNumber,) = _get_struct_I2H4h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.NtcTem = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.CellVoltage = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.ErrorId = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ErrorInfo = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ErrorInfo.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f2ih().pack(_x.Voltage, _x.Current, _x.ResidualCapacity, _x.DesignCapacity, _x.CycleIndex))
      _x = self.DataProduction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I2H4h().pack(_x.StatusBalance, _x.StatusProtect, _x.Version, _x.Rsoc, _x.StatueMos, _x.CellNumber, _x.NtcNumber))
      length = len(self.NtcTem)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.NtcTem.tostring())
      length = len(self.CellVoltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.CellVoltage.tostring())
      length = len(self.ErrorId)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.ErrorId.tostring())
      length = len(self.ErrorInfo)
      buff.write(_struct_I.pack(length))
      for val1 in self.ErrorInfo:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.Voltage, _x.Current, _x.ResidualCapacity, _x.DesignCapacity, _x.CycleIndex,) = _get_struct_2f2ih().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.DataProduction = str[start:end].decode('utf-8')
      else:
        self.DataProduction = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.StatusBalance, _x.StatusProtect, _x.Version, _x.Rsoc, _x.StatueMos, _x.CellNumber, _x.NtcNumber,) = _get_struct_I2H4h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.NtcTem = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.CellVoltage = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.ErrorId = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ErrorInfo = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ErrorInfo.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2ih = None
def _get_struct_2f2ih():
    global _struct_2f2ih
    if _struct_2f2ih is None:
        _struct_2f2ih = struct.Struct("<2f2ih")
    return _struct_2f2ih
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I2H4h = None
def _get_struct_I2H4h():
    global _struct_I2H4h
    if _struct_I2H4h is None:
        _struct_I2H4h = struct.Struct("<I2H4h")
    return _struct_I2H4h
