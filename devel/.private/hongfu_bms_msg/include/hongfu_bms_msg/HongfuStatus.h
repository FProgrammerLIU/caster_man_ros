// Generated by gencpp from file hongfu_bms_msg/HongfuStatus.msg
// DO NOT EDIT!


#ifndef HONGFU_BMS_MSG_MESSAGE_HONGFUSTATUS_H
#define HONGFU_BMS_MSG_MESSAGE_HONGFUSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hongfu_bms_msg
{
template <class ContainerAllocator>
struct HongfuStatus_
{
  typedef HongfuStatus_<ContainerAllocator> Type;

  HongfuStatus_()
    : header()
    , Voltage(0.0)
    , Current(0.0)
    , ResidualCapacity(0)
    , DesignCapacity(0)
    , CycleIndex(0)
    , DataProduction()
    , StatusBalance(0)
    , StatusProtect(0)
    , Version(0)
    , Rsoc(0)
    , StatueMos(0)
    , CellNumber(0)
    , NtcNumber(0)
    , NtcTem()
    , CellVoltage()
    , ErrorId()
    , ErrorInfo()  {
    }
  HongfuStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Voltage(0.0)
    , Current(0.0)
    , ResidualCapacity(0)
    , DesignCapacity(0)
    , CycleIndex(0)
    , DataProduction(_alloc)
    , StatusBalance(0)
    , StatusProtect(0)
    , Version(0)
    , Rsoc(0)
    , StatueMos(0)
    , CellNumber(0)
    , NtcNumber(0)
    , NtcTem(_alloc)
    , CellVoltage(_alloc)
    , ErrorId(_alloc)
    , ErrorInfo(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _Voltage_type;
  _Voltage_type Voltage;

   typedef float _Current_type;
  _Current_type Current;

   typedef int32_t _ResidualCapacity_type;
  _ResidualCapacity_type ResidualCapacity;

   typedef int32_t _DesignCapacity_type;
  _DesignCapacity_type DesignCapacity;

   typedef int16_t _CycleIndex_type;
  _CycleIndex_type CycleIndex;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _DataProduction_type;
  _DataProduction_type DataProduction;

   typedef uint32_t _StatusBalance_type;
  _StatusBalance_type StatusBalance;

   typedef uint16_t _StatusProtect_type;
  _StatusProtect_type StatusProtect;

   typedef uint16_t _Version_type;
  _Version_type Version;

   typedef int16_t _Rsoc_type;
  _Rsoc_type Rsoc;

   typedef int16_t _StatueMos_type;
  _StatueMos_type StatueMos;

   typedef int16_t _CellNumber_type;
  _CellNumber_type CellNumber;

   typedef int16_t _NtcNumber_type;
  _NtcNumber_type NtcNumber;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _NtcTem_type;
  _NtcTem_type NtcTem;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _CellVoltage_type;
  _CellVoltage_type CellVoltage;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _ErrorId_type;
  _ErrorId_type ErrorId;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _ErrorInfo_type;
  _ErrorInfo_type ErrorInfo;





  typedef boost::shared_ptr< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> const> ConstPtr;

}; // struct HongfuStatus_

typedef ::hongfu_bms_msg::HongfuStatus_<std::allocator<void> > HongfuStatus;

typedef boost::shared_ptr< ::hongfu_bms_msg::HongfuStatus > HongfuStatusPtr;
typedef boost::shared_ptr< ::hongfu_bms_msg::HongfuStatus const> HongfuStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hongfu_bms_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'hongfu_bms_msg': ['/home/caster/ros_ws/caster/src/hongfu_bms/hongfu_bms_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b80f4c066d6a4a362443344e0856c5ce";
  }

  static const char* value(const ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb80f4c066d6a4a36ULL;
  static const uint64_t static_value2 = 0x2443344e0856c5ceULL;
};

template<class ContainerAllocator>
struct DataType< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hongfu_bms_msg/HongfuStatus";
  }

  static const char* value(const ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# voltage\n"
"float32 Voltage\n"
"\n"
"# current\n"
"float32 Current\n"
"\n"
"# residualCapacity\n"
"int32 ResidualCapacity\n"
"\n"
"# DesignCapacity\n"
"int32 DesignCapacity\n"
"\n"
"# CycleIndex\n"
"int16 CycleIndex\n"
"\n"
"# DataProduction\n"
"string DataProduction\n"
"\n"
"# StatusBalance\n"
"uint32 StatusBalance\n"
"\n"
"# StatusProtect\n"
"uint16 StatusProtect\n"
"\n"
"# Version\n"
"uint16 Version\n"
"\n"
"# Rsoc\n"
"int16 Rsoc\n"
"\n"
"# StatueMos\n"
"int16 StatueMos\n"
"\n"
"# CellNumber\n"
"int16 CellNumber\n"
"\n"
"# NtcNumber\n"
"int16 NtcNumber\n"
"\n"
"# NtcTem\n"
"float64[] NtcTem\n"
"\n"
"# CellVoltage\n"
"float64[] CellVoltage\n"
"\n"
"# ErrorId\n"
"int64[] ErrorId\n"
"\n"
"# ErrorInfo\n"
"string[] ErrorInfo\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Voltage);
      stream.next(m.Current);
      stream.next(m.ResidualCapacity);
      stream.next(m.DesignCapacity);
      stream.next(m.CycleIndex);
      stream.next(m.DataProduction);
      stream.next(m.StatusBalance);
      stream.next(m.StatusProtect);
      stream.next(m.Version);
      stream.next(m.Rsoc);
      stream.next(m.StatueMos);
      stream.next(m.CellNumber);
      stream.next(m.NtcNumber);
      stream.next(m.NtcTem);
      stream.next(m.CellVoltage);
      stream.next(m.ErrorId);
      stream.next(m.ErrorInfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HongfuStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hongfu_bms_msg::HongfuStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Voltage: ";
    Printer<float>::stream(s, indent + "  ", v.Voltage);
    s << indent << "Current: ";
    Printer<float>::stream(s, indent + "  ", v.Current);
    s << indent << "ResidualCapacity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ResidualCapacity);
    s << indent << "DesignCapacity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DesignCapacity);
    s << indent << "CycleIndex: ";
    Printer<int16_t>::stream(s, indent + "  ", v.CycleIndex);
    s << indent << "DataProduction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.DataProduction);
    s << indent << "StatusBalance: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.StatusBalance);
    s << indent << "StatusProtect: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.StatusProtect);
    s << indent << "Version: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Version);
    s << indent << "Rsoc: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Rsoc);
    s << indent << "StatueMos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.StatueMos);
    s << indent << "CellNumber: ";
    Printer<int16_t>::stream(s, indent + "  ", v.CellNumber);
    s << indent << "NtcNumber: ";
    Printer<int16_t>::stream(s, indent + "  ", v.NtcNumber);
    s << indent << "NtcTem[]" << std::endl;
    for (size_t i = 0; i < v.NtcTem.size(); ++i)
    {
      s << indent << "  NtcTem[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.NtcTem[i]);
    }
    s << indent << "CellVoltage[]" << std::endl;
    for (size_t i = 0; i < v.CellVoltage.size(); ++i)
    {
      s << indent << "  CellVoltage[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.CellVoltage[i]);
    }
    s << indent << "ErrorId[]" << std::endl;
    for (size_t i = 0; i < v.ErrorId.size(); ++i)
    {
      s << indent << "  ErrorId[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.ErrorId[i]);
    }
    s << indent << "ErrorInfo[]" << std::endl;
    for (size_t i = 0; i < v.ErrorInfo.size(); ++i)
    {
      s << indent << "  ErrorInfo[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ErrorInfo[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HONGFU_BMS_MSG_MESSAGE_HONGFUSTATUS_H
